{"ast":null,"code":"import _classCallCheck from\"/Users/anisa/Documents/react-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/anisa/Documents/react-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/anisa/Documents/react-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/anisa/Documents/react-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Lists from'./Lists.js';import AddList from'./AddList.js';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);_this.state={lists:[],// this holds the name of each list\nitems:{}// this property names of this object are the names of the lists; their values are arrays of the items in each list\n};return _this;}/**\n   * This function takes the state of an AddList component as its parameter\n   * and updates the state of this App component by adding a new entry to the \"lists\"\n   * array and then adding a new property in the \"items\" object that has the same name\n   * as the value put into the \"lists\" array. It should then re-render this App component.\n   */_createClass(App,[{key:\"handleAddList\",value:function handleAddList(s){// Implement this function!\n}/**\n   * This function takes the state of an AddItem component as its parameter\n   * and updates the state of this App component by adding a new value to the \n   * appropriate array in the \"items\" property of the state. Keep in mind that\n   * the property names of \"items\" are the names of each list, which is mapped\n   * to an array of the items in that list. After updating the \"items\" part of \n   * the state, this function  should then re-render this App component.\n   */},{key:\"handleAddItem\",value:function handleAddItem(s){// Implement this function!\n}/**\n   * Renders the component.\n   */},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(AddList,{addList:this.handleAddList.bind(this)}),/*#__PURE__*/_jsx(\"div\",{id:\"listsDiv\",className:\"List\",children:/*#__PURE__*/_jsx(Lists,{lists:this.state.lists,items:this.state.items,addItem:this.handleAddItem.bind(this)})})]});}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/anisa/Documents/react-list/src/App.js"],"names":["React","Component","Lists","AddList","App","state","lists","items","s","handleAddList","bind","handleAddItem"],"mappings":"glBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,cAApB,CACA,MAAO,WAAP,C,2FAEMC,CAAAA,G,0FAEJ,cAAc,qCACZ,wBACA,MAAKC,KAAL,CAAa,CAChBC,KAAK,CAAE,EADS,CACL;AACXC,KAAK,CAAE,EAAG;AAFM,CAAb,CAFY,aAMb,CAED;AACF;AACA;AACA;AACA;AACA,K,6CACE,uBAAcC,CAAd,CAAiB,CACb;AACH,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA,K,6BACE,uBAAcA,CAAd,CAAiB,CACb;AACH,CAED;AACF;AACA,K,sBACE,iBAAS,CACP,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,KAAC,OAAD,EAAS,OAAO,CAAE,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAlB,EADF,cAEE,YAAK,EAAE,CAAC,UAAR,CAAmB,SAAS,CAAC,MAA7B,uBACE,KAAC,KAAD,EAAO,KAAK,CAAE,KAAKL,KAAL,CAAWC,KAAzB,CAAgC,KAAK,CAAE,KAAKD,KAAL,CAAWE,KAAlD,CAAyD,OAAO,CAAE,KAAKI,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAAlE,EADF,EAFF,GADF,CAQD,C,iBA5CeT,S,EAgDlB,cAAeG,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Lists from './Lists.js';\nimport AddList from './AddList.js';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n\tlists: [], // this holds the name of each list\n\titems: {} // this property names of this object are the names of the lists; their values are arrays of the items in each list\n    };\n  }\n\n  /**\n   * This function takes the state of an AddList component as its parameter\n   * and updates the state of this App component by adding a new entry to the \"lists\"\n   * array and then adding a new property in the \"items\" object that has the same name\n   * as the value put into the \"lists\" array. It should then re-render this App component.\n   */\n  handleAddList(s) {\n      // Implement this function!\n  }\n\n  /**\n   * This function takes the state of an AddItem component as its parameter\n   * and updates the state of this App component by adding a new value to the \n   * appropriate array in the \"items\" property of the state. Keep in mind that\n   * the property names of \"items\" are the names of each list, which is mapped\n   * to an array of the items in that list. After updating the \"items\" part of \n   * the state, this function  should then re-render this App component.\n   */\n  handleAddItem(s) {\n      // Implement this function!\n  }\n\n  /**\n   * Renders the component.\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <AddList addList={this.handleAddList.bind(this)} />\n        <div id=\"listsDiv\" className=\"List\">\n          <Lists lists={this.state.lists} items={this.state.items} addItem={this.handleAddItem.bind(this)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}